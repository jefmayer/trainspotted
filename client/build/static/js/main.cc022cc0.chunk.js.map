{"version":3,"sources":["js/modules/chart/Entry.jsx","js/modules/chart/Chart.jsx","App.js","serviceWorker.js","index.js","img/trainspotted-logo.svg"],"names":["Entry","_ref","entry","react_default","a","createElement","date","Chart","data","this","props","entires","forEach","console","log","push","chart_Entry","key","id","$oid","className","map","Component","engines","number","line","order","location","time","direction","request","XMLHttpRequest","open","onload","status","responseText","warn","send","getData","App","src","logo","alt","chart_Chart","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4LAgBeA,EAZD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACZC,EAAAC,EAAAC,cAAA,WACGH,EAAMI,OCiDIC,mLAjDJ,IAELC,EACEC,KAAKC,MADPF,KAGIG,EAAU,GAchB,OAXAH,EAAKI,QAAQ,SAACV,GACRA,EAAMI,KAGVO,QAAQC,IAAIZ,EAAMI,MAClBK,EAAQI,KACNZ,EAAAC,EAAAC,cAACW,EAAD,CAAOd,MAAOA,EAAOe,IAAKf,EAAMgB,GAAGC,QAE1BjB,EAAMI,OAIjBH,EAAAC,EAAAC,cAAA,OAAKe,UAAU,yBACbjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,iBACbjB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,WACGG,EAAKa,IAAI,SAAAnB,GAAK,OAAIC,EAAAC,EAAAC,cAACW,EAAD,CAAOC,IAAKf,EAAMgB,GAAGC,KAAMjB,MAAOA,eAvC3CoB,6BCCdd,SAAO,CACX,CACEU,GAAI,CACFC,KAAM,4BAERI,QAAS,CACP,CACEC,OAAQ,OACRC,KAAM,mBACNC,MAAO,EACPC,SAAU,UAGdrB,KAAM,YACNsB,KAAM,cACNC,UAAW,SAEb,CACEX,GAAI,CACFC,KAAM,4BAERI,QAAS,CACP,CACEC,OAAQ,OACRC,KAAM,mBACNC,MAAO,EACPC,SAAU,SAEZ,CACEH,OAAQ,OACRC,KAAM,uBACNC,MAAO,EACPC,SAAU,SAEZ,CACEH,OAAQ,OACRC,KAAM,mBACNC,MAAO,EACPC,SAAU,UAGdrB,KAAM,YACNsB,KAAM,aACNC,UAAW,YAIf,WACEhB,QAAQC,IAAI,WAEZ,IAAMgB,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,eAAe,GAEnCF,EAAQG,OAAS,WACXH,EAAQI,QAAU,KAAOJ,EAAQI,OAAS,KAG5CrB,QAAQC,IAAIgB,EAAQI,QACpBrB,QAAQC,IAAIgB,EAAQK,gBAEpBtB,QAAQC,IAAIgB,EAAQK,cACpBtB,QAAQuB,KAAK,6BAGjBN,EAAQO,OAGVC,GAceC,MAZf,WACE,OACEpC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,UAAQe,UAAU,cAChBjB,EAAAC,EAAAC,cAAA,OAAKmC,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,SACzCvC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aAAf,iBAEFjB,EAAAC,EAAAC,cAACsC,EAAD,CAAOnC,KAAMA,MCrECoC,QACW,cAA7BC,OAAOlB,SAASmB,UAEkB,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MAAM,2DCbtCC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC,kCEzHnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.cc022cc0.chunk.js","sourcesContent":["/* eslint-disable react/prefer-stateless-function, prefer-destructuring */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Entry = ({ entry }) => (\n  <div>\n    {entry.date}\n  </div>\n);\n\nEntry.propTypes = {\n  entry: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Entry;\n/* eslint-enable react/prefer-stateless-function, prefer-destructuring */\n","/* eslint-disable react/prefer-stateless-function, no-console */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Entry from './Entry';\n\nclass Chart extends Component {\n  render() {\n    const {\n      data,\n    } = this.props;\n\n    const entires = [];\n    let lastDate = null;\n\n    data.forEach((entry) => {\n      if (entry.date !== lastDate) {\n        // Test\n      }\n      console.log(entry.date);\n      entires.push(\n        <Entry entry={entry} key={entry.id.$oid} />,\n      );\n      lastDate = entry.date;\n    });\n\n    return (\n      <div className=\"container train-chart\">\n        <div className=\"x-axis-header\">\n          <ul>\n            <li>12 AM</li>\n            <li>2 AM</li>\n            <li>4 AM</li>\n            <li>6 AM</li>\n            <li>8 AM</li>\n            <li>10 AM</li>\n            <li>12 PM</li>\n            <li>2 PM</li>\n            <li>4 PM</li>\n            <li>6 PM</li>\n            <li>8 PM</li>\n            <li>10 PM</li>\n          </ul>\n        </div>\n        <div>\n          {data.map(entry => <Entry key={entry.id.$oid} entry={entry} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Chart;\n/* eslint-enable react/prefer-stateless-function, no-console */\n","/* eslint-disable no-console */\nimport React from 'react';\nimport Chart from './js/modules/chart/Chart';\nimport logo from './img/trainspotted-logo.svg';\nimport './scss/App.scss';\n\nconst data = [\n  {\n    id: {\n      $oid: '5cd1cc73e7179a596b1c743f',\n    },\n    engines: [\n      {\n        number: '8750',\n        line: 'Canadian Pacific',\n        order: 1,\n        location: 'front',\n      },\n    ],\n    date: '3/19/2019',\n    time: '10:27:00 AM',\n    direction: 'south',\n  },\n  {\n    id: {\n      $oid: '5cd1cca0e7179a596b1c745a',\n    },\n    engines: [\n      {\n        number: '8870',\n        line: 'Canadian Pacific',\n        order: 1,\n        location: 'front',\n      },\n      {\n        number: '4805',\n        line: 'Kansas City Southern',\n        order: 2,\n        location: 'front',\n      },\n      {\n        number: '9833',\n        line: 'Canadian Pacific',\n        order: 1,\n        location: 'front',\n      },\n    ],\n    date: '3/20/2019',\n    time: '9:21:00 AM',\n    direction: 'south',\n  },\n];\n\nfunction getData() {\n  console.log('getData');\n  // let requesting = true;\n  const request = new XMLHttpRequest();\n  request.open('GET', '/getRecords', true);\n\n  request.onload = () => {\n    if (request.status >= 200 && request.status < 400) {\n      // requesting = false;\n      // console.log(JSON.parse(request.responseText));\n      console.log(request.status);\n      console.log(request.responseText);\n    } else {\n      console.log(request.responseText);\n      console.warn('App.js, getData : error');\n    }\n  };\n  request.send();\n}\n\ngetData();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"app-logo\" alt=\"logo\" />\n        <div className=\"app-title\">Trainspotted</div>\n      </header>\n      <Chart data={data} />\n    </div>\n  );\n}\n\nexport default App;\n/* eslint-enable no-console */\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-enable no-console */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trainspotted-logo.f965f559.svg\";"],"sourceRoot":""}