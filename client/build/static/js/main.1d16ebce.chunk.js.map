{"version":3,"sources":["js/modules/chart/Entry.jsx","js/modules/chart/Chart.jsx","App.js","serviceWorker.js","index.js","img/trainspotted-logo.svg"],"names":["Entry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","divRef","React","createRef","entry","console","log","time","arr","split","indexOf","parseInt","pct","toFixed","offLeft","current","offsetLeft","setAttribute","concat","react_default","a","createElement","className","ref","engines","map","engine","key","number","Component","Chart","state","entries","getEntries","_this2","fetch","then","res","json","setState","dates","toConsumableArray","Set","date","chart_Entry","_id","App","src","logo","alt","chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1d16ebce.chunk.js","sourcesContent":["/* eslint-disable prefer-destructuring, no-console */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Entry extends Component {\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { entry } = this.props;\n    // Look at time to create percentage offset\n    console.log(entry.time);\n    // Add 12, not to 12PM\n    const arr = entry.time.split(':');\n    if (entry.time.indexOf('PM') !== -1 && entry.time.indexOf('12:') === -1) {\n      arr[0] = parseInt(arr[0], 10) + 12;\n    }\n    // Set 12AM to 0\n    if (entry.time.indexOf('AM') !== -1 && entry.time.indexOf('12:') !== -1) {\n      arr[0] = parseInt(arr[0], 10) - 12;\n    }\n    const pct = ((arr[0] * 3600 + parseInt(arr[1], 10) * 60) / 864).toFixed(2);\n    console.log(pct);\n    // Set all items to same position from the edge\n    const offLeft = this.divRef.current.offsetLeft;\n    if (offLeft > 0) {\n      this.divRef.current.setAttribute('style', `margin-left:calc(${pct}% - ${(offLeft + 3)}px);`);\n    } else {\n      this.divRef.current.setAttribute('style', `margin-left:${pct}%;`);\n    }\n  }\n\n  render() {\n    const { entry } = this.props;\n\n    return (\n      <div className=\"engine-manifest\" ref={this.divRef}>\n        {\n          entry.engines.map(engine => (\n            <span className=\"engine-number\" key={engine.number}>\n              {engine.number}\n            </span>\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nEntry.propTypes = {\n  entry: PropTypes.shape({\n    time: PropTypes.string.isRequired,\n    engines: PropTypes.arrayOf(PropTypes.object),\n  }),\n};\n\nexport default Entry;\n/* eslint-enable prefer-destructuring, no-console */\n","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport Entry from './Entry';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      entries: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getEntries();\n  }\n\n  getEntries() {\n    fetch('/getRecords')\n      .then(res => res.json())\n      .then(entries => this.setState({ entries }));\n  }\n\n  render() {\n    const { entries } = this.state;\n    const dates = [...new Set(entries.map(entry => entry.date))];\n\n    return (\n      <div className=\"container train-chart\">\n        <div className=\"x-axis-header clearfix\">\n          <ul>\n            <li>12 AM</li>\n            <li>2 AM</li>\n            <li>4 AM</li>\n            <li>6 AM</li>\n            <li>8 AM</li>\n            <li>10 AM</li>\n            <li>12 PM</li>\n            <li>2 PM</li>\n            <li>4 PM</li>\n            <li>6 PM</li>\n            <li>8 PM</li>\n            <li>10 PM</li>\n          </ul>\n        </div>\n        <div className=\"time-table\">\n          {\n            dates.map(date => (\n              <div className=\"date-line\" key={date}>\n                <div className=\"date-display\">\n                  {date}\n                </div>\n                <div className=\"entries-for-date\">\n                  {\n                    entries.map((entry) => {\n                      if (entry.date === date) {\n                        return <Entry key={entry._id} entry={entry} />; /* eslint-disable-line no-underscore-dangle */\n                      }\n                      return '';\n                    })\n                  }\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n/* eslint-enable no-console */\n","/* eslint-disable no-console */\nimport React from 'react';\nimport Chart from './js/modules/chart/Chart';\nimport logo from './img/trainspotted-logo.svg';\nimport './scss/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"app-logo\" alt=\"logo\" />\n        <div className=\"app-title\">Trainspotted</div>\n      </header>\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n/* eslint-enable no-console */\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-enable no-console */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trainspotted-logo.f965f559.svg\";"],"sourceRoot":""}